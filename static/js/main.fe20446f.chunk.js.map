{"version":3,"sources":["Components/Phonebook/Phonebook.module.css","redux/actions.js","redux/action-types.js","Components/Phonebook/PhonebookForm.jsx","Components/ContactsFilter/ContactsFilter.jsx","Components/Contacts/Contacts.jsx","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","findContact","connect","state","contacts","dispatch","onSubmitForm","contact","actions","useState","name","number","setState","onChange","e","currentTarget","value","className","styles","title","onSubmit","preventDefault","newContact","id","v4","container","formItem","type","pattern","required","phonebookBtn","useStyles","createUseStyles","filterForm","fontFamily","width","marginTop","padding","border","borderRadius","boxShadow","filterInput","fontSize","filter","classes","length","contactsList","flexDirection","deleteBtn","display","borderStyle","fontWeight","color","textDecoration","background","transition","listItem","justifyContent","alignItems","marginBottom","listText","margin","getVisibleContacts","toLowerCase","includes","onDelete","map","onClick","App","contactsReducer","createReducer","payload","Object","values","alert","filterReducer","store","configureStore","reducer","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe20446f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__1yW5e\",\"container\":\"Phonebook_container__-nv-k\",\"formItem\":\"Phonebook_formItem__3Qivu\",\"phonebookBtn\":\"Phonebook_phonebookBtn__231fb\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { ADD, DELETE, FILTER } from './action-types';\r\n\r\nconst addContact = createAction(ADD);\r\nconst deleteContact = createAction(DELETE);\r\nconst findContact = createAction(FILTER);\r\n\r\nexport default {\r\n    addContact,\r\n    deleteContact,\r\n    findContact,\r\n};\r\n\r\n// const addContact = contact => ({\r\n//     type: ADD,\r\n//     payload: contact,\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n// const findContact = value => ({\r\n//     type: FILTER,\r\n//     payload: value,\r\n// });\r\n","const ADD = 'contacts/addContact';\r\nconst DELETE = 'contacts/deleteContact';\r\nconst FILTER = 'contactsFilter/filterContact';\r\n\r\nexport { ADD, DELETE, FILTER };\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { v4 } from 'uuid';\r\nimport actions from '../../redux/actions';\r\nimport styles from './Phonebook.module.css';\r\n\r\nconst PhonebookForm = ({ onSubmitForm }) => {\r\n    const [state, setState] = useState({ name: '', number: '' });\r\n    const onChange = e => {\r\n        setState({ ...state, [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const newContact = { id: v4(), name: state.name, number: state.number };\r\n        setState({\r\n            name: '',\r\n            number: '',\r\n        });\r\n        onSubmitForm(newContact);\r\n    };\r\n    return (\r\n        <>\r\n            <h2 className={styles.title}>Phonebook</h2>\r\n            <form onSubmit={onSubmit} className={styles.container}>\r\n                <label className={styles.formItem}>\r\n                    Name:\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={state.name}\r\n                        onChange={onChange}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                    />\r\n                </label>\r\n                <label className={styles.formItem}>\r\n                    Number:\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                        required\r\n                        value={state.number}\r\n                        onChange={onChange}\r\n                    />\r\n                </label>\r\n                <button type=\"Submit\" className={styles.phonebookBtn}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmitForm: contact => dispatch(actions.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookForm);\r\n","import { createUseStyles } from 'react-jss';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nconst useStyles = createUseStyles({\r\n    filterForm: {\r\n        fontFamily: 'Roboto',\r\n        width: 370,\r\n        marginTop: 10,\r\n        padding: '15px 10px',\r\n        border: '1px solid rgba(225, 225, 225, 10)',\r\n        borderRadius: 5,\r\n        boxShadow: '3px 3px 5px 0px rgba(225, 225, 225, 10)',\r\n    },\r\n    filterInput: {\r\n        fontSize: 20,\r\n        width: 360,\r\n    },\r\n});\r\n\r\nconst ContactsFilter = ({ contacts, filter, onChange }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        contacts.length > 0 && (\r\n            <form className={classes.filterForm}>\r\n                <label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={filter}\r\n                        onChange={onChange}\r\n                        className={classes.filterInput}\r\n                    />\r\n                </label>\r\n            </form>\r\n        )\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts,\r\n    filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(actions.findContact(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsFilter);\r\n","import { createUseStyles } from 'react-jss';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nconst useStyles = createUseStyles({\r\n    contactsList: {\r\n        flexDirection: 'column',\r\n        fontFamily: 'Roboto',\r\n        fontSize: 20,\r\n        width: 370,\r\n        marginTop: 10,\r\n        padding: '10px 10px',\r\n        border: '1px solid rgba(225, 225, 225, 10)',\r\n        borderRadius: 5,\r\n        boxShadow: '3px 3px 5px 0px rgba(225, 225, 225, 10)',\r\n    },\r\n    deleteBtn: {\r\n        display: 'block',\r\n        width: 100,\r\n        borderStyle: 'none',\r\n        fontWeight: 500,\r\n        fontSize: 16,\r\n        color: 'white',\r\n        textDecoration: 'none',\r\n        padding: '5px 10px',\r\n        borderRadius: 3,\r\n        background: 'rgb(64,199,129)',\r\n        boxShadow: '0 -3px rgb(53,167,110) inset',\r\n        transition: '0.2s',\r\n        '&:hover': { background: 'rgb(53, 167, 110)' },\r\n        '&:active': {\r\n            background: 'rgb(33,147,90)',\r\n            boxShadow: '0 3px rgb(33,147,90) inset',\r\n        },\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: 5,\r\n        '&:last-child': { marginBottom: 0 },\r\n    },\r\n    listText: {\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nconst Contacts = ({ contacts, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        contacts.length > 0 && (\r\n            <ul className={classes.contactsList}>\r\n                {contacts.map(({ name, id, number }) => (\r\n                    <li key={id} className={classes.listItem}>\r\n                        <p className={classes.listText}>\r\n                            {name}: {number}\r\n                        </p>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => onDelete(id)}\r\n                            className={classes.deleteBtn}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    );\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) =>\r\n    contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n\r\nconst mapStateToProps = ({ contacts, filter }) => ({\r\n    contacts: getVisibleContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDelete: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import { connect } from 'react-redux';\r\nimport PhonebookForm from './Components/Phonebook';\r\nimport ContactsFilter from './Components/ContactsFilter';\r\nimport Contacts from './Components/Contacts';\r\n\r\nconst App = () => (\r\n    <main>\r\n        <PhonebookForm />\r\n        <ContactsFilter />\r\n        <Contacts />\r\n    </main>\r\n);\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport actions from '../redux/actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) =>\r\n        Object.values(\r\n            state.map(({ name }) => name).includes(payload.name)\r\n                ? (alert('Contact with such name already exists'), [...state])\r\n                : [...state, payload],\r\n        ),\r\n    [actions.deleteContact]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.findContact]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default { contactsReducer, filterReducer };\r\n","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\r\n// import actions from '../redux/actions';\r\nimport reducers from './reducers';\r\n// import { ADD, DELETE, FILTER } from './action-types';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: reducers.contactsReducer,\r\n        filter: reducers.filterReducer,\r\n    },\r\n});\r\nexport default store;\r\n\r\n// const contactsReducer = createReducer([], {\r\n//     [actions.addContact]: (state, { payload }) =>\r\n//         Object.values(\r\n//             state.map(({ name }) => name).includes(payload.name)\r\n//                 ? (alert('Contact with such name already exists'), [...state])\r\n//                 : [...state, payload],\r\n//         ),\r\n//     [actions.deleteContact]: (state, { payload }) =>\r\n//         state.filter(({ id }) => id !== payload),\r\n// });\r\n\r\n// const filterReducer = createReducer('', {\r\n//     [actions.findContact]: (state, { payload }) => payload,\r\n// });\r\n\r\n// const contactsReducer = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case ADD:\r\n//             return Object.values(\r\n//                 state.map(({ name }) => name).includes(payload.name)\r\n//                     ? (alert('Contact with such name already exists'),\r\n//                       [...state])\r\n//                     : [...state, payload],\r\n//             );\r\n//         case DELETE:\r\n//             return state.filter(({ id }) => id !== payload);\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case FILTER:\r\n//             return payload;\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer,\r\n//     filter: filterReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const initialState = {\r\n//     contacts: [],\r\n//     filter: '',\r\n// };\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return {\r\n//                 ...state,\r\n//                 contacts: Object.values(\r\n//                     state.contacts\r\n//                         .map(({ name }) => name)\r\n//                         .includes(payload.name)\r\n//                         ? (alert('Contact with such name already exists'),\r\n//                           [...state.contacts])\r\n//                         : [...state.contacts, payload],\r\n//                 ),\r\n//             };\r\n//         case types.DELETE:\r\n//             return {\r\n//                 ...state,\r\n//                 contacts: state.contacts.filter(({ id }) => id !== payload),\r\n//             };\r\n\r\n//         case types.FILTER:\r\n//             return {\r\n//                 ...state,\r\n//                 filter: payload,\r\n//             };\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}